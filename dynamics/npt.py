# This script was generated by OpenMM-Setup on 2021-07-22.

import sys
from simtk.openmm import *
from simtk.openmm.app import *
from simtk.unit import *

cnt = int(sys.argv[1])
pcnt = cnt-1

#if cnt == 1:
#    rst = f'traj/nvt_10.rst'

if cnt > 1:
    rst = f'traj/npt_{pcnt}.rst'

# Input Files

psf = CharmmPsfFile('step3_pbcsetup.psf')
crd = CharmmCrdFile('step3_pbcsetup.crd')
#params = CharmmParameterSet('toppar/top_all36_prot.rtf', 'toppar/par_all36m_prot.prm', 'toppar/top_all36_na.rtf', 'toppar/par_all36_na.prm', 'toppar/top_all36_carb.rtf', 'toppar/par_all36_carb.prm', 'toppar/top_all36_lipid.rtf', 'toppar/par_all36_lipid.prm', 'toppar/top_all36_cgenff.rtf', 'toppar/par_all36_cgenff.prm', 'toppar/toppar_all36_moreions.str', 'toppar/toppar_water_ions.str', 'toppar/toppar_dum_noble_gases.str', 'toppar/toppar_ions_won.str')
params = CharmmParameterSet('toppar/top_all36_prot.rtf', 'toppar/par_all36m_prot.prm', 'toppar/top_all36_na.rtf', 'toppar/par_all36_na.prm', 'toppar/top_all36_carb.rtf', 'toppar/par_all36_carb.prm', 'toppar/top_all36_lipid.rtf', 'toppar/par_all36_lipid.prm', 'toppar/top_all36_cgenff.rtf', 'toppar/par_all36_cgenff.prm', 'toppar/toppar_all36_moreions.str', 'toppar/top_interface.rtf', 'toppar/par_interface.prm', 'toppar/toppar_all36_nano_lig.str', 'toppar/toppar_all36_nano_lig_patch.str', 'toppar/toppar_all36_synthetic_polymer.str', 'toppar/toppar_all36_synthetic_polymer_patch.str', 'toppar/toppar_all36_polymer_solvent.str', 'toppar/toppar_water_ions.str', 'toppar/toppar_dum_noble_gases.str', 'toppar/toppar_ions_won.str', 'toppar/toppar_all36_prot_arg0.str', 'toppar/toppar_all36_prot_c36m_d_aminoacids.str', 'toppar/toppar_all36_prot_fluoro_alkanes.str', 'toppar/toppar_all36_prot_heme.str', 'toppar/toppar_all36_prot_na_combined.str', 'toppar/toppar_all36_prot_retinol.str', 'toppar/toppar_all36_prot_model.str', 'toppar/toppar_all36_prot_modify_res.str', 'toppar/toppar_all36_na_nad_ppi.str', 'toppar/toppar_all36_na_rna_modified.str', 'toppar/toppar_all36_lipid_sphingo.str', 'toppar/toppar_all36_lipid_archaeal.str', 'toppar/toppar_all36_lipid_bacterial.str', 'toppar/toppar_all36_lipid_cardiolipin.str', 'toppar/toppar_all36_lipid_cholesterol.str', 'toppar/toppar_all36_lipid_dag.str', 'toppar/toppar_all36_lipid_inositol.str', 'toppar/toppar_all36_lipid_lnp.str', 'toppar/toppar_all36_lipid_lps.str', 'toppar/toppar_all36_lipid_mycobacterial.str', 'toppar/toppar_all36_lipid_miscellaneous.str', 'toppar/toppar_all36_lipid_model.str', 'toppar/toppar_all36_lipid_prot.str', 'toppar/toppar_all36_lipid_tag.str', 'toppar/toppar_all36_lipid_yeast.str', 'toppar/toppar_all36_lipid_hmmm.str', 'toppar/toppar_all36_lipid_detergent.str', 'toppar/toppar_all36_lipid_ether.str', 'toppar/toppar_all36_carb_glycolipid.str', 'toppar/toppar_all36_carb_glycopeptide.str', 'toppar/toppar_all36_carb_imlab.str')

# System Configuration

nonbondedMethod = PME
nonbondedCutoff = 1.2*nanometers
ewaldErrorTolerance = 0.0005
constraints = HBonds
rigidWater = True
constraintTolerance = 0.000001

# Integration Options

dt = 0.001*picoseconds
temperature = 300*kelvin
friction = 1.0/picosecond
pressure = 1.0*atmospheres
barostatInterval = 25

# Simulation Options

platform = Platform.getPlatformByName('CUDA')
platformProperties = {'Precision': 'mixed'}


minim = float('inf')
maxim = float('-inf')
for i in range(len(crd.positions)):
    for j in range(3):
        if crd.positions[i]._value[j] > maxim:
            maxim = crd.positions[i]._value[j]
        if crd.positions[i]._value[j] < minim:
            minim = crd.positions[i]._value[j]

#unit = crd.positions[0].unit._name

xtl = (maxim - minim)*angstroms
psf.setBox(xtl,xtl,xtl)
topology = psf.topology
positions = crd.positions
system = psf.createSystem(params, nonbondedMethod=nonbondedMethod, nonbondedCutoff=nonbondedCutoff,
    constraints=constraints, rigidWater=rigidWater, ewaldErrorTolerance=ewaldErrorTolerance)
system.addForce(MonteCarloBarostat(pressure, temperature, barostatInterval))
integrator = NoseHooverIntegrator(temperature, friction, dt)
integrator.setConstraintTolerance(constraintTolerance)
simulation = Simulation(topology, system, integrator, platform, platformProperties)
simulation.context.setPositions(positions)

steps = 100000
equilibrationSteps = 500
dcdReporter = DCDReporter(f'traj/npt_{cnt}.dcd', 100)
dataReporter = StateDataReporter(f'out/npt_{cnt}.out', 1000, totalSteps=steps,
    step=True, progress=True, potentialEnergy=True, kineticEnergy=True,
    totalEnergy=True, temperature=True, volume=True, density=True, separator='\t')
#checkpointReporter = CheckpointReporter('checkpoint.chk', 10000)

# Prepare the Simulation

print('Building system...')

if cnt > 1:
    with open(rst, 'r') as f:
        simulation.context.setState(XmlSerializer.deserialize(f.read()))

# Minimize and Equilibrate

if cnt == 1:
    print('Performing energy minimization...')
    simulation.minimizeEnergy()
    print('Equilibrating...')
    simulation.context.setVelocitiesToTemperature(temperature)
    simulation.step(equilibrationSteps)
    simulation.currentStep = 0

# Simulate

print('Simulating...')
simulation.reporters.append(dcdReporter)
simulation.reporters.append(dataReporter)
#simulation.reporters.append(checkpointReporter)
simulation.step(steps)

state = simulation.context.getState( getPositions=True, getVelocities=True )
with open(f'traj/npt_{cnt}.rst', 'w') as f:
    f.write(XmlSerializer.serialize(state))

crd = simulation.context.getState(getPositions=True).getPositions()
PDBFile.writeFile(psf.topology, crd, open('trans_equil.pdb', 'w'))
